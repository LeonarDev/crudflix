{"version":3,"sources":["components/MovieCard.js","components/Loading.js","services/movieData.js","services/movieAPI.js","pages/MovieList.js","components/MovieForm.js","pages/MovieDetails.js","pages/NewMovie.js","pages/EditMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","movie","this","props","data-testid","className","src","imagePath","alt","title","storyline","to","id","React","Component","Loading","movies","subtitle","rating","bookmarked","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","SUCCESS_STATUS","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","deleteMovie","filter","status","MovieList","fetchMovies","bind","state","loading","a","allMovies","setState","map","MovieForm","handleSubmit","onSubmit","field","newValue","htmlFor","placeholder","type","value","onChange","event","updateMovie","target","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","MovieDetails","fetchMovie","match","params","movieAPI","movieDetails","movieDetailsAbout","movieDetailsButtons","createMovieCard","NewMovie","shouldRedirect","newMovie","movieData","nextId","length","EditMovie","fetchDetails","updatedMovie","NotFound","App","style","textDecoration","exact","path","component","render","mainHeader","routes","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e0f7d674.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './MovieCard.css';\r\n\r\nclass MovieCard extends React.Component {\r\n  render() {\r\n    const { movie } = this.props;\r\n    return (\r\n      <div data-testid=\"movie-card\" className=\"movie-card\">\r\n        <div className=\"movie-card-image\">\r\n          <img src={ movie.imagePath } alt=\"Movie poster\" />\r\n        </div>\r\n        <p className=\"movie-card-title\">\r\n          { movie.title }\r\n        </p>\r\n        <p className=\"movie-card-storyline\">\r\n          { movie.storyline }\r\n        </p>\r\n        <div className=\"movie-card-details-button\">\r\n          <Link to={ `/movies/${movie.id}` }>MAIS INFORMAÇÕES</Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMovieCard.propTypes = {\r\n  title: PropTypes.string,\r\n}.isRequired;\r\n\r\nexport default MovieCard;\r\n","import React, { Component } from 'react';\r\nimport './Loading.css';\r\n\r\nclass Loading extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"loading\">\r\n        Carregando...\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loading;\r\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport MovieCard from '../components/MovieCard';\r\nimport Loading from '../components/Loading';\r\n\r\nimport * as movieAPI from '../services/movieAPI';\r\nimport './MovieList.css';\r\n\r\nclass MovieList extends Component {\r\n  constructor() {\r\n    super();\r\n    this.fetchMovies = this.fetchMovies.bind(this);\r\n    this.state = {\r\n      movies: [],\r\n      loading: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchMovies();\r\n  }\r\n\r\n  async fetchMovies() {\r\n    const allMovies = await movieAPI.getMovies();\r\n    this.setState({\r\n      movies: allMovies,\r\n      loading: false,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { movies, loading } = this.state;\r\n    if (loading) return <Loading />;\r\n    return (\r\n      <>\r\n        <div data-testid=\"movie-list\" className=\"movie-list\">\r\n          {movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)}\r\n        </div>\r\n        <Link to=\"/movies/new\" className=\"add-card-button\">ADICIONAR FILME</Link>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './MovieForm.css';\r\n\r\nclass MovieForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { ...props.movie };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit() {\r\n    const { onSubmit } = this.props;\r\n    onSubmit(this.state);\r\n  }\r\n\r\n  updateMovie(field, newValue) {\r\n    this.setState({ [field]: newValue });\r\n  }\r\n\r\n  renderTitleInput() {\r\n    const { title } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <label htmlFor=\"movie_title\">\r\n          Título\r\n          <input\r\n            placeholder=\"Insira o título\"\r\n            id=\"movie_title\"\r\n            type=\"text\"\r\n            className=\"validate\"\r\n            value={ title }\r\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\r\n          />\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderSubtitleInput() {\r\n    const { subtitle } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <label htmlFor=\"movie_subtitle\">\r\n          Subtítulo\r\n          <input\r\n            placeholder=\"Insira o subtítulo\"\r\n            id=\"movie_subtitle\"\r\n            type=\"text\"\r\n            value={ subtitle }\r\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\r\n          />\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderImagePathInput() {\r\n    const { imagePath } = this.state;\r\n\r\n    return (\r\n      <div className=\"row\">\r\n        <label htmlFor=\"movie_image\">\r\n          Imagem\r\n          <input\r\n            placeholder=\"Insira o caminho da imagem\"\r\n            id=\"movie_image\"\r\n            type=\"text\"\r\n            value={ imagePath }\r\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\r\n          />\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderStorylineInput() {\r\n    const { storyline } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <label htmlFor=\"movie_storyline\">\r\n          Sinopse\r\n          <textarea\r\n            id=\"movie_storyline\"\r\n            value={ storyline }\r\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\r\n          />\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderGenreSelection() {\r\n    const { genre } = this.state;\r\n    return (\r\n      <div>\r\n        <label htmlFor=\"movie_genre\">\r\n          Gênero\r\n          <select\r\n            id=\"movie_genre\"\r\n            value={ genre }\r\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\r\n          >\r\n            <option value=\"action\">Ação</option>\r\n            <option value=\"comedy\">Comédia</option>\r\n            <option value=\"thriller\">Suspense</option>\r\n            <option value=\"fantasy\">Fantasia</option>\r\n          </select>\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderRatingInput() {\r\n    const { rating } = this.state;\r\n    return (\r\n      <div>\r\n        <label htmlFor=\"movie_rating\">\r\n          Avaliação\r\n          <input\r\n            placeholder=\"Dê a avaliação do filme\"\r\n            id=\"movie_rating\"\r\n            type=\"number\"\r\n            step={ 0.1 }\r\n            min={ 0 }\r\n            max={ 5 }\r\n            value={ rating }\r\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\r\n          />\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderSubmitButton() {\r\n    return (\r\n      <div>\r\n        <button\r\n          type=\"button\"\r\n          onClick={ this.handleSubmit }\r\n        >\r\n          EDITAR\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form>\r\n          {this.renderTitleInput()}\r\n          {this.renderSubtitleInput()}\r\n          {this.renderImagePathInput()}\r\n          {this.renderStorylineInput()}\r\n          {this.renderGenreSelection()}\r\n          {this.renderRatingInput()}\r\n          {this.renderSubmitButton()}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMovieForm.propTypes = {\r\n  movie: PropTypes.string,\r\n}.isRequired;\r\n\r\nexport default MovieForm;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nimport * as movieAPI from '../services/movieAPI';\r\nimport { Loading } from '../components';\r\n\r\nimport './MovieDetails.css';\r\n\r\nclass MovieDetails extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.fetchMovie = this.fetchMovie.bind(this);\r\n    this.deleteMovie = this.deleteMovie.bind(this);\r\n    this.state = {\r\n      movie: [],\r\n      loading: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { match } = this.props;\r\n    this.fetchMovie(match.params.id);\r\n  }\r\n\r\n  async fetchMovie(id) {\r\n    const movieDetails = await movieAPI.getMovie(id);\r\n    this.setState({\r\n      movie: movieDetails,\r\n      loading: false,\r\n    });\r\n  }\r\n\r\n  async deleteMovie(id) {\r\n    await movieAPI.deleteMovie(id);\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  movieDetailsAbout(movie) {\r\n    const { title, storyline, subtitle } = movie;\r\n    return (\r\n      <>\r\n        <p>\r\n          Title:\r\n          <div className=\"movie-details-title\">{`${title}`}</div>\r\n        </p>\r\n        <p>\r\n          Subtitle:\r\n          <div className=\"movie-details-subtitle\">{`${subtitle}`}</div>\r\n        </p>\r\n        <p>\r\n          Storyline:\r\n          <div className=\"movie-details-storyline\">{`${storyline}`}</div>\r\n        </p>\r\n      </>\r\n    );\r\n  }\r\n\r\n  movieDetailsButtons(movie) {\r\n    return (\r\n      <div className=\"movie-details-buttons\">\r\n        <Link to={ `/movies/${movie.id}/edit` }>EDITAR</Link>\r\n        <Link to=\"/\">VOLTAR</Link>\r\n        <Link to=\"/\" onClick={ () => this.deleteMovie(movie.id) }>DELETAR</Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  movieDetails(movie) {\r\n    const { genre, rating } = movie;\r\n    return (\r\n      <div className=\"movie-details\">\r\n        { this.movieDetailsAbout(movie) }\r\n        <p>\r\n          Genre:\r\n          <div className=\"movie-details-genre\">{`${genre}`}</div>\r\n        </p>\r\n        <p>\r\n          Rating:\r\n          <div className=\"movie-details-rating\">{`${rating}`}</div>\r\n        </p>\r\n        { this.movieDetailsButtons(movie) }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  createMovieCard(movie) {\r\n    const { imagePath } = movie;\r\n    return (\r\n      <div className=\"movie-details-container\">\r\n        <div className=\"movie-details-image\">\r\n          <img alt=\"Movie Cover\" src={ `../${imagePath}` } />\r\n        </div>\r\n        { this.movieDetails(movie) }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { movie, loading } = this.state;\r\n    if (loading) return <Loading />;\r\n    return (\r\n      <div data-testid=\"movie-details\">\r\n        {this.createMovieCard(movie)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMovieDetails.propTypes = {\r\n  id: PropTypes.string,\r\n}.isRequired;\r\n\r\nexport default MovieDetails;\r\n","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport MovieForm from '../components/MovieForm';\r\nimport * as movieAPI from '../services/movieAPI';\r\n\r\nclass NewMovie extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.state = {\r\n      shouldRedirect: false,\r\n    };\r\n  }\r\n\r\n  handleSubmit(newMovie) {\r\n    movieAPI.createMovie(newMovie);\r\n    this.setState({\r\n      shouldRedirect: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { shouldRedirect } = this.state;\r\n    if (shouldRedirect) return <Redirect to=\"/\" />;\r\n    return (\r\n      <div data-testid=\"new-movie\">\r\n        <MovieForm onSubmit={ this.handleSubmit } />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default NewMovie;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport { MovieForm, Loading } from '../components';\r\nimport * as movieAPI from '../services/movieAPI';\r\n\r\nclass EditMovie extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.fetchDetails = this.fetchDetails.bind(this);\r\n    this.state = {\r\n      movie: [],\r\n      loading: true,\r\n      shouldRedirect: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { match } = this.props;\r\n    this.fetchDetails(match.params.id);\r\n  }\r\n\r\n  handleSubmit(updatedMovie) {\r\n    movieAPI.updateMovie(updatedMovie);\r\n    this.setState({\r\n      shouldRedirect: true,\r\n    });\r\n  }\r\n\r\n  async fetchDetails(id) {\r\n    const movieDetails = await movieAPI.getMovie(id);\r\n    this.setState({\r\n      movie: movieDetails,\r\n      loading: false,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { loading, shouldRedirect, movie } = this.state;\r\n    if (loading) return <Loading />;\r\n    if (shouldRedirect) return <Redirect to=\"/\" />;\r\n\r\n    return (\r\n      <div data-testid=\"edit-movie\">\r\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nEditMovie.propTypes = {\r\n  movie: PropTypes.string,\r\n}.isRequired;\r\n\r\nexport default EditMovie;\r\n","import React, { Component } from 'react';\r\n\r\nclass NotFound extends Component {\r\n  render() {\r\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\r\n  }\r\n}\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport { BrowserRouter, Link, Route, Switch } from 'react-router-dom';\r\nimport MovieList from './pages/MovieList';\r\nimport MovieDetails from './pages/MovieDetails';\r\nimport NewMovie from './pages/NewMovie';\r\nimport EditMovie from './pages/EditMovie';\r\nimport NotFound from './pages/NotFound';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  mainHeader() {\r\n    return (\r\n      <header className=\"main-header\">\r\n        <Link to=\"/crudflix/\" style={{ textDecoration: 'none' }}>\r\n          <h1 className=\"main-title\">CRUDflix</h1>\r\n        </Link>\r\n      </header>\r\n    );\r\n  }\r\n\r\n  routes() {\r\n    return (\r\n      <Switch>\r\n        <Route exact path=\"/crudflix/\" component={ MovieList } />\r\n        <Route path=\"/crudflix/movies/new\" component={ NewMovie } />\r\n        <Route\r\n          path=\"/crudflix/movies/:id/edit\"\r\n          render={ (props) => <EditMovie { ...props } /> }\r\n        />\r\n        <Route path=\"/crudflix/movies/:id\" render={ (props) => <MovieDetails { ...props } /> } />\r\n        <Route component={ NotFound } />\r\n      </Switch>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <BrowserRouter>\r\n          {this.mainHeader()}\r\n          {this.routes()}\r\n        </BrowserRouter>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}